@inherits LayoutComponentBase
@using Blazored.Toast.Configuration
using Microsoft.AspNetCore.Components.Authorization;
@using Microsoft.AspNetCore.Identity;
@inject NavigationManager NavigationManager
<style>

    .anyClass {
        height: 87vh;
        overflow-y: scroll;
    }

    /* width */
    ::-webkit-scrollbar {
        width: 10px;
    }

    /* Track */
    ::-webkit-scrollbar-track {
        background : inherit;
    }

    /* Handle */
    ::-webkit-scrollbar-thumb {
        background: #229383;
    }

        /* Handle on hover */
        ::-webkit-scrollbar-thumb:hover {
            background: #229383;
        }
</style>
    <div id="wrapper">

            <NavMenu></NavMenu>

        <div id="content-wrapper" class="d-flex flex-column">
            <div id="content">
                <TopNav></TopNav>
                <div class="container-fluid anyClass" >
                    @Body
                </div>
            </div>
            @*<Footer></Footer>*@
        </div>
    </div>



    <!-- Logout Modal-->
    <div class="modal fade" id="logoutModal" tabindex="-1" role="dialog" aria-labelledby="exampleModalLabel" aria-hidden="true">
        <div class="modal-dialog" role="document">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title" id="exampleModalLabel">Ready to Leave?</h5>
                    <button class="close" type="button" data-dismiss="modal" aria-label="Close">
                        <span aria-hidden="true">×</span>
                    </button>
                </div>
                <div class="modal-body">Are you sure you want to Logout?</div>
                <div class="modal-footer">
                    <button class="btn btn-secondary" type="button" data-dismiss="modal">Cancel</button>
                    <a class="btn btn-primary" href="/logout"  onclick="$('#logoutModal').modal('hide')">Logout</a>
                </div>
            </div>
        </div>
    </div>

@code{

    [CascadingParameter] protected Task<AuthenticationState> AuthStat { get; set; }

    [Inject]
        protected UserManager<IdentityUser<int>> UserManager { get; set; }

    protected async override Task OnInitializedAsync()
    {
        base.OnInitialized();
        var principalUser = (await AuthStat).User;
        var user = await UserManager.FindByEmailAsync(principalUser.Identity.Name);
        if (user == null)
        {
            NavigationManager.NavigateTo("/signin");
        }
        //if(user.Identity.IsAuthenticated)
        //{
        //    //NavigationManager.NavigateTo($"authentication/login?returnUrl={Uri.EscapeDataString(NavigationManager.Uri)}");
        //NavigationManager.NavigateTo("/signin");
        //}
    }
}