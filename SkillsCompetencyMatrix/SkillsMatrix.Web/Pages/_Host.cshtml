@page "/"
@namespace SkillsMatrix.Web
@addTagHelper *, Microsoft.AspNetCore.Mvc.TagHelpers
@{ Layout = null; }

<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="utf-8" />
    <meta name="viewport" content="width=device-width" />
    <base href="/" />
    <title>SoluGrowth Skills Competency Matrix</title>
    <base href="~/" />
    @*<link rel="stylesheet" href="https://stackpath.bootstrapcdn.com/bootstrap/4.4.1/css/bootstrap.min.css">
        <script defer src="assets/fontawesome/js/all.min.js"></script>
        <link id="theme-style" rel="stylesheet" href="assets/css/pillar-1.css">
        <link rel="stylesheet" href="css/bootstrap/bootstrap.min.css" />
        <link href="css/site.css" rel="stylesheet" />*@
    <link href="css/stepper.css" rel="stylesheet" />


    <link rel="stylesheet" href="css/bootstrap/bootstrap.min.css" />
    <link href="https://fonts.googleapis.com/css?family=Nunito:200,200i,300,300i,400,400i,600,600i,700,700i,800,800i,900,900i" rel="stylesheet">
    <link href="layout/vendor/fontawesome-free/css/all.min.css" rel="stylesheet" type="text/css">
    <link href="layout/css/sb-admin-2.min.css" rel="stylesheet">



</head>
<body id="page-top">

    <app>
        <component type="typeof(App)" render-mode="ServerPrerendered" />
    </app>

    <script>
        // This sample uses the Autocomplete widget to help the user select a
        // place, then it retrieves the address components associated with that
        // place, and then it populates the form fields with those details.
        // This sample requires the Places library. Include the libraries=places
        // parameter when you first load the API. For example:
        // <script
        // src="https://maps.googleapis.com/maps/api/js?key=YOUR_API_KEY&libraries=places">
        let placeSearch;
        let autocomplete;
        const componentForm = {
            street_number: "short_name",
            route: "long_name",
            locality: "long_name",
            administrative_area_level_1: "short_name",
            country: "long_name",
            postal_code: "short_name",
        };

        function initAutocomplete() {
            // Create the autocomplete object, restricting the search predictions to
            // geographical location types.
            autocomplete = new google.maps.places.Autocomplete(
                document.getElementById("autocomplete"),
                { types: ["geocode"] }
            );
            // Avoid paying for data that you don't need by restricting the set of
            // place fields that are returned to just the address components.
            autocomplete.setFields(["address_component"]);
            // When the user selects an address from the drop-down, populate the
            // address fields in the form.
            autocomplete.addListener("place_changed", fillInAddress);
        }

        function fillInAddress() {
            // Get the place details from the autocomplete object.
            const place = autocomplete.getPlace();

            for (const component in componentForm) {
                document.getElementById(component).value = "";
                document.getElementById(component).disabled = false;
            }

            // Get each component of the address from the place details,
            // and then fill-in the corresponding field on the form.
            for (const component of place.address_components) {
                const addressType = component.types[0];

                if (componentForm[addressType]) {
                    const val = component[componentForm[addressType]];
                    document.getElementById(addressType).value = val;
                }
            }
        }

        // Bias the autocomplete object to the user's geographical location,
        // as supplied by the browser's 'navigator.geolocation' object.
        function geolocate() {
            if (navigator.geolocation) {
                navigator.geolocation.getCurrentPosition((position) => {
                    const geolocation = {
                        lat: position.coords.latitude,
                        lng: position.coords.longitude,
                    };
                    const circle = new google.maps.Circle({
                        center: geolocation,
                        radius: position.coords.accuracy,
                    });
                    autocomplete.setBounds(circle.getBounds());
                });
            }
        }
    </script>
    <script src="https://maps.googleapis.com/maps/api/js?key=AIzaSyAGafzh7tV2fKKypcr6LoR-KDIF1-S0cdg&callback=initAutocomplete&libraries=places&v=weekly"
            defer></script>
    <script src="https://polyfill.io/v3/polyfill.min.js?features=default"></script>
    <script src="_framework/blazor.server.js"></script>

    <script src="layout/vendor/jquery/jquery.min.js"></script>
    <script src="layout/vendor/bootstrap/js/bootstrap.bundle.min.js"></script>
    <script src="layout/vendor/jquery-easing/jquery.easing.min.js"></script>
    <script src="layout/js/sb-admin-2.min.js"></script>
    <script src="layout/vendor/chart.js/Chart.min.js"></script>
    <script src="layout/js/demo/chart-area-demo.js"></script>
    <script src="layout/js/demo/chart-pie-demo.js"></script>
</body>
</html>